// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package phone

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PhoneClient is the client API for Phone service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PhoneClient interface {
	Call(ctx context.Context, opts ...grpc.CallOption) (Phone_CallClient, error)
	UpdateSettings(ctx context.Context, in *UserSettingsData, opts ...grpc.CallOption) (*UserSettingsResponse, error)
}

type phoneClient struct {
	cc grpc.ClientConnInterface
}

func NewPhoneClient(cc grpc.ClientConnInterface) PhoneClient {
	return &phoneClient{cc}
}

func (c *phoneClient) Call(ctx context.Context, opts ...grpc.CallOption) (Phone_CallClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Phone_serviceDesc.Streams[0], "/phone.Phone/Call", opts...)
	if err != nil {
		return nil, err
	}
	x := &phoneCallClient{stream}
	return x, nil
}

type Phone_CallClient interface {
	Send(*CallData) error
	Recv() (*CallData, error)
	grpc.ClientStream
}

type phoneCallClient struct {
	grpc.ClientStream
}

func (x *phoneCallClient) Send(m *CallData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *phoneCallClient) Recv() (*CallData, error) {
	m := new(CallData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *phoneClient) UpdateSettings(ctx context.Context, in *UserSettingsData, opts ...grpc.CallOption) (*UserSettingsResponse, error) {
	out := new(UserSettingsResponse)
	err := c.cc.Invoke(ctx, "/phone.Phone/UpdateSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhoneServer is the server API for Phone service.
// All implementations should embed UnimplementedPhoneServer
// for forward compatibility
type PhoneServer interface {
	Call(Phone_CallServer) error
	UpdateSettings(context.Context, *UserSettingsData) (*UserSettingsResponse, error)
}

// UnimplementedPhoneServer should be embedded to have forward compatible implementations.
type UnimplementedPhoneServer struct {
}

func (UnimplementedPhoneServer) Call(Phone_CallServer) error {
	return status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedPhoneServer) UpdateSettings(context.Context, *UserSettingsData) (*UserSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSettings not implemented")
}

// UnsafePhoneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhoneServer will
// result in compilation errors.
type UnsafePhoneServer interface {
	mustEmbedUnimplementedPhoneServer()
}

func RegisterPhoneServer(s grpc.ServiceRegistrar, srv PhoneServer) {
	s.RegisterService(&_Phone_serviceDesc, srv)
}

func _Phone_Call_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PhoneServer).Call(&phoneCallServer{stream})
}

type Phone_CallServer interface {
	Send(*CallData) error
	Recv() (*CallData, error)
	grpc.ServerStream
}

type phoneCallServer struct {
	grpc.ServerStream
}

func (x *phoneCallServer) Send(m *CallData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *phoneCallServer) Recv() (*CallData, error) {
	m := new(CallData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Phone_UpdateSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSettingsData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneServer).UpdateSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/phone.Phone/UpdateSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneServer).UpdateSettings(ctx, req.(*UserSettingsData))
	}
	return interceptor(ctx, in, info, handler)
}

var _Phone_serviceDesc = grpc.ServiceDesc{
	ServiceName: "phone.Phone",
	HandlerType: (*PhoneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateSettings",
			Handler:    _Phone_UpdateSettings_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Call",
			Handler:       _Phone_Call_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/protobuf/phone.proto",
}
