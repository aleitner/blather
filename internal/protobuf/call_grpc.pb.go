// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package call

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CallClient is the client API for Call service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CallClient interface {
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	Call(ctx context.Context, opts ...grpc.CallOption) (Call_CallClient, error)
}

type callClient struct {
	cc grpc.ClientConnInterface
}

func NewCallClient(cc grpc.ClientConnInterface) CallClient {
	return &callClient{cc}
}

func (c *callClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, "/call.Call/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callClient) Call(ctx context.Context, opts ...grpc.CallOption) (Call_CallClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Call_serviceDesc.Streams[0], "/call.Call/Call", opts...)
	if err != nil {
		return nil, err
	}
	x := &callCallClient{stream}
	return x, nil
}

type Call_CallClient interface {
	Send(*CallData) error
	CloseAndRecv() (*CallResponse, error)
	grpc.ClientStream
}

type callCallClient struct {
	grpc.ClientStream
}

func (x *callCallClient) Send(m *CallData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *callCallClient) CloseAndRecv() (*CallResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CallResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CallServer is the server API for Call service.
// All implementations must embed UnimplementedCallServer
// for forward compatibility
type CallServer interface {
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	Call(Call_CallServer) error
	mustEmbedUnimplementedCallServer()
}

// UnimplementedCallServer must be embedded to have forward compatible implementations.
type UnimplementedCallServer struct {
}

func (UnimplementedCallServer) Connect(context.Context, *ConnectRequest) (*ConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedCallServer) Call(Call_CallServer) error {
	return status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedCallServer) mustEmbedUnimplementedCallServer() {}

// UnsafeCallServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CallServer will
// result in compilation errors.
type UnsafeCallServer interface {
	mustEmbedUnimplementedCallServer()
}

func RegisterCallServer(s grpc.ServiceRegistrar, srv CallServer) {
	s.RegisterService(&_Call_serviceDesc, srv)
}

func _Call_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/call.Call/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Call_Call_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CallServer).Call(&callCallServer{stream})
}

type Call_CallServer interface {
	SendAndClose(*CallResponse) error
	Recv() (*CallData, error)
	grpc.ServerStream
}

type callCallServer struct {
	grpc.ServerStream
}

func (x *callCallServer) SendAndClose(m *CallResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *callCallServer) Recv() (*CallData, error) {
	m := new(CallData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Call_serviceDesc = grpc.ServiceDesc{
	ServiceName: "call.Call",
	HandlerType: (*CallServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Call_Connect_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Call",
			Handler:       _Call_Call_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "internal/protobuf/call.proto",
}
